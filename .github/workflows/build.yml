name: Build luci-app-adguardhome

permissions:
  contents: write

on:
  push:
    branches:
      - main
    paths:
      - '**/Makefile'
  pull_request:
  workflow_dispatch:
  release:
    types: [created]

env:
  TZ: Asia/Shanghai
  SDK_VER: "24.10"
  LUCI_VER: "24.10"
  SDK_URL: "https://downloads.openwrt.org/releases/24.10.3/targets/ipq40xx/generic/openwrt-sdk-24.10.3-ipq40xx-generic_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup build environment
        run: |
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /usr/local/lib/android
          echo "Install environment packages"
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install -y build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
            python3 python3-pip python3-ply python3-docutils python3-pyelftools \
            rsync unzip zlib1g-dev file wget zstd
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean

      - name: Cache dl
        uses: actions/cache@v4
        with:
          path: sdk/dl
          key: ${{ runner.os }}-openwrt-dl-${{ env.SDK_VER }}
          restore-keys: |
            ${{ runner.os }}-openwrt-dl-

      - name: Download and extract OpenWrt SDK
        run: |
          mkdir -p sdk
          find sdk -mindepth 1 -maxdepth 1 ! -name dl -exec rm -rf {} +
          
          cd sdk
          wget -q $SDK_URL -O sdk.tar.zst
          tar --use-compress-program=unzstd -xf sdk.tar.zst --strip-components=1

      - name: Prepare feeds
        run: |
          cd sdk
          ln -s $GITHUB_WORKSPACE package/luci-app-adguardhome
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
          #--------------------------------------begin_patches------------------------------------------
          echo "Start applying the patch"
          rm -rf temp_resp
          git clone -b master --single-branch https://github.com/openwrt/packages.git temp_resp
          cd temp_resp
          git checkout 2b99cd7d7637da0f152da378994f699aaf0dd44d
          cd ..
          echo "update golang version"
          rm -rf feeds/packages/lang/golang
          cp -r temp_resp/lang/golang feeds/packages/lang
          echo "update rust version"
          rm -rf feeds/packages/lang/rust
          cp -r temp_resp/lang/rust feeds/packages/lang
          rm -rf temp_resp
          echo "Patch application completed"
          #--------------------------------------end_patches--------------------------------------------
      - name: Generate luci.mk patch
        id: gen_luci_patch
        uses: Jackie264/actions-repo/gen-luci-mk-patch@latest
        with:
          packages_dir: "feeds/packages feeds/luci"
          output_dir: "patches"
          
      - name: Build luci-app-adguardhome
        id: compile
        run: |
          cd sdk
          make defconfig
          make package/luci-app-adguardhome/{clean,compile} -j$(nproc) V=s
          echo "status=success" >> $GITHUB_OUTPUT
        
      - name: Collect artifacts
        id: collect
        if: steps.compile.outputs.status == 'success'
        run: |
          mkdir -p output
          find sdk/bin/packages/ -name "luci-app-adguardhome*.ipk" -exec cp {} output/ \;
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Normalize IPK filenames
        if: steps.collect.outputs.status == 'success'
        id: rename
        uses: Jackie264/actions-repo/rename-ipk@latest
        with:
          target_dir: output
          mode: strip

      - name: Parse version from ipk
        id: parse
        uses: Jackie264/actions-repo/parse-ipk-file@latest
        with:
          file: ${{ steps.rename.outputs.files }}

      - name: Generate release.txt (Markdown table)
        id: generate
        run: |
          build_time=$(date +"%Y-%m-%d %H:%M:%S %Z")
          commit_sha=$(git rev-parse --short HEAD || echo "n/a")
          {
            echo "| Package | Version | Build Time | Commit |"
            echo "|---------|-----------------|------------|--------|"
            echo "| ${{ steps.parse.outputs.pkg }} | ${{ steps.parse.outputs.ver }} | $build_time | $commit_sha |"
          } > release.txt
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload to GitHub Release
        if: steps.generate.outputs.status == 'success'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.parse.outputs.ver }}
          name: ${{ steps.parse.outputs.ver }}
          body_path: release.txt
          files: ${{ steps.rename.outputs.files }}
          
      - name: Keep only latest 3 releases
        uses: dev-drprasad/delete-older-releases@v0.3.4
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
